
## Example for bass management 5.1.2 compatible dolby atmos with substractive filters using bessel 4th order
## this gives perfect linear phase (fixed group delay) which is a mandatory condition to have different  crossover frequencies.
## in 96k each output to dac can be replaced by outputvolsat to avoid any risk of saturation.
## the LFE channel is increased by 10db
## possibility to choose if the center channel low freq is sent to FRONT, or to SUB directly

DSPXS2      3               # inform compiler that we run on XCORE XS200 target, with initial condition "3" (pureUSB)
DSPMANT     28,56           # recomended precision
DSPCLOCK    560,496,528,0   # cpu frequence tuning
DSPFSMIN    44100 
DSPFSMAX    192000
DSPPRINTF   1               # minimize verbose printing

# constants definition to select which channel will be treated to go trough subwoofer
sL 1 ; sR 2 ; sC 4 ; sLS 8 ; sRS 16 ; sLtm 32 ; sRtm 64 ; sALL 127 ; sCENTER_TO_FRONT 128

# program features, can be enabled/toggled by user

TEST_REW        = sL+sR+sC+sLS+sRS        # send outputs to REW (for measurement) instead of DACs and activate given channels

# define which channel must be routed to SUB woofer and if CENTER residual LF should go to Front
# as an example, if front are "large" then remove "sL + sR" from equation below
MODE_SUB        = sL+sR+sC #sL #+ sR #+ sC + sLS + sRS + sLtm + sRtm # + sCENTER_TO_FRONT
# definition of the final gain applied on the SUB (as it will sum all lowfreq channels)
gain_SUB        = 1

VOL_SAT         = 0         # 1 to enable DSP program managing saturation and volume reduction accordingly
WITH_EQ_F       = 1         # 1 to enable user specific filters on front
WITH_EQ_C       = 1         # 1 to enable user specific filters on center
WITH_EQ_S       = 1         # 1 to enable user specific filters on surround
WITH_EQ_Stm     = 1         # 1 to enable user specific filters on surrounf head
WITH_EQ_SUB     = 1         # 1 to enable user specific filters on sub
WITH_DEL        = 1         # 1 to enable distance alignement


## DAC output assignement , can be changed by user

DAC_L			0
DAC_R			1
DAC_C			2
DAC_SUB			3
DAC_LS			4
DAC_RS			5
DAC_Ltm			6	#overhead speakers for dolby atmos
DAC_Rtm			7

## key frequencies for individual crossover, can be changed by user freely

Fc_FRONT		40		# crossover frequency for both front speakers
Fc_CENTRE		60		# crossover frequency for centre channel
Fc_SUR			80		# crossover frequency for both surround speakers 
Fc_SURtm		120		# crossover frequency for head speakers
Fc_SUB			1000	# optional low pass cut off frequency for subwoofer (typically 200..260). The defautl 1000hz doesnt impact phase in low frequency region
#-## CROSSOVER Frequencies FRONT=[Fc_FRONT]hz, CENTRE=[Fc_CENTRE]hz, SUR=[Fc_SUR]hz, SURtm=[Fc_SURtm]hz

#-# filters definition for each output . default PEQ correction set at 0db
# for KH O300 which behave almost as high pass LR4
# a simple LT is done to push the cutoff few hertz left, to avoid saturation in bass (closed box)
#F_FRONT_HP		LT(36,0.75,45,0.75) 	# this also requires a delay value of 3000 in PH_FRONT

if (WITH_EQ_F) 
#- front speaker equalization
F_FRONT_EQ  PEAK(400,1,0db)	PEAK(800,1,0db)	PEAK(1600,1,0db) PEAK(1600,1,0db) PEAK(1600,1,0db) HS2(8000,1,0db)	# optional EQ for 44..96k
else
#- no front speaker equalization
endif
if (WITH_EQ_C)
#- center speaker filter bank
F_CENTRE_EQ PEAK( 1000,1,0db ) PEAK( 2000,1,0db )  PEAK( 2000,1,0db )  HS2(8000,1,0db)		# optional EQ for 44..96k
else
#- no centre speaker equalization
endif
if (WITH_EQ_S) 
#- surround speakers filter
F_SUR_EQ	PEAK( 1000,1,0db ) PEAK( 2000,1,0db ) PEAK( 3000,1,0db )  #HS2(8000,1,0db)		# optional EQ for 44..96k
else
#- no surround speaker equalization
endif
if (WITH_EQ_Stm)
#- overhead surround (only in pureUSB))
F_SURtm_EQ	PEAK( 1000,1,0db ) #PEAK( 2000,1,0db ) # HS2(8000,1,0db)	
else
#- no overhead surround equalization
endif
if (WITH_EQ_SUB)
#- optional subwoofer EQ and low pass eventually
F_SUB_EQ	PEAK( 80,1,0db ) PEAK( 80,1,0db ) #LPBE2( Fc_SUB )
else
#- no subwoofer equalization
endif

## bank of delays given in microseconds to correct speaker distance at listening point
## each value should be computed based on 343m/seconds and the value should be relative to the farest speaker.
## example : if farest is at 4m from listening position (example mains L & R)) and if center is at 3.8m
## then the center should be delayed by (4-3.8)/343*1000000 = 583us
delayratio	= 1000000/343	# typical ratio to compute number of microseconds based on distance in meters for typical sound speed

DEL_L		=	100	# 1200		# or can use a formula based on distance like = dist * delayratio
DEL_R		=	100 # 1200
DEL_C		=	100 #  400
DEL_SUB		=	100 # 1400
DEL_LS		=	100 # 2800
DEL_RS		=	100 # 2000
DEL_Ltm		=	100 #  500
DEL_Rtm		=	100 #    0


# sanity check of user choices because a prealignement is done with the front speakers
if (Fc_CENTRE - Fc_FRONT,65536) ERROR # Fc_CENTRE must be higher or equal to Fc_FRONT
if (Fc_SUR    - Fc_FRONT,65536) ERROR # Fc_SUR must be higher or equal to Fc_FRONT
if (Fc_SURtm  - Fc_FRONT,65536) ERROR # Fc_SURtm must be higher or equal to Fc_FRONT

#-BESSEL filters order 4 definition
cbe4    1.112   # magic coefficient to shift crossover point for LV4 filters
dbe4    509550  # magic numerator to get bessel4 group delay with formula gdbe4 = dbe4 / ( fc * cbe4 )

if (MODE_SUB,sL+sR)                   F_FRONT_SUB		LPBE4( Fc_FRONT * cbe4 )
if (MODE_SUB,sC+sCENTER_TO_FRONT )    F_CENTRE_SUB	    LPBE4( Fc_CENTRE * cbe4 )
if (MODE_SUB,sLS+sRS)                 F_SUR_SUB		    LPBE4( Fc_SUR * cbe4 )
if (MODE_SUB,sLtm+sRtm)               F_SURtm_SUB		LPBE4( Fc_SURtm * cbe4 )

DSPPRINTF 2 

# formula below should not be changed. This is the equivalent delay for the bessel 4 filters at respective fc
DEL_FRONT_BES     = dbe4 / Fc_FRONT / cbe4
DEL_CENTRE_BES    = dbe4 / Fc_CENTRE / cbe4
DEL_SUR_BES       = dbe4 / Fc_SUR / cbe4
DEL_SURtm_BES     = dbe4 / Fc_SURtm / cbe4

#-DELAYS PRE-FILTERING to align phases
#-Front Speakers LV4    = [DEL_FRONT_BES]us
#-Centre speaker LV4    = [DEL_CENTRE_BES]us
#-Surround speakers LV4 = [DEL_SUR_BES]us
#-Surround Head LV4     = [DEL_SURtm_BES]us

## USB inputs definition. Same for AES due to internal loopback in xmos when in PureAES mode

Lin				? 16
Rin				? 17
Cin				? 18
LFEin			? 19
LSin			? 20
RSin			? 21
Ltmin			? 22	#not used in case of AES inputs 
Rtmin			? 23	#not used in case of AES inputs 

# forcing inputs from first channel (16) only when we are in TEST_REW mode
if (TEST_REW,sL)        Lin   ?= 16
if (TEST_REW,sR)        Rin   ?= 16
if (TEST_REW,sC)        Cin   ?= 16
if (TEST_REW,sLS)       LSin  ?= 16
if (TEST_REW,sRS)       LSin  ?= 16
if (TEST_REW,sLtm)      Ltmin ?= 16
if (TEST_REW,sRtm)      Rtmin ?= 16
# display resulting input mapping
#-Inputs Lin [Lin], Rin [Rin], Cin [Cin], LSin [LSin], RSin [RSin], Ltmin [Ltmin], Rtmin [Rtmin], LFEin [LFEin]
if (TEST_REW)
#-
#-#### MODE TEST ACTIVATED ####
#-no distance alignement
WITH_DEL        ?= 0
#-no Equalization filters
WITH_EQ_F ?= 0 ; WITH_EQ_C ?= 0 ; WITH_EQ_S ?= 0 ; WITH_EQ_Stm ?= 0 ; WITH_EQ_SUB ?= 0
VOL_SAT          ?= 0
#-no VOL_SAT ([VOL_SAT])
## special outputs definition to USB host only used when TEST_REW is activated
REW1		24	; REW_LOOPBACK = REW1	    # correspond to input channel 1 in REW menus, as a straight loopback reference
REW2		25	; DAC_L       ?= REW2	    # response of FRONT
REW3		26	; DAC_C       ?= REW3	    # response of centre		    
REW4		27	; DAC_LS      ?= REW4       # SUR response                
REW5		28	; DAC_Ltm     ?= REW5       # SURtm response
REW6		29	; DAC_SUB     ?= REW6		# total SUB response including LFE
REW7		30	; REW_SUM      = REW7       # used to show the electrical sum of all selected channels
REW8		31	; 
DAC_R ?= REW8 ; DAC_RS ?= REW8; DAC_Rtm ?= REW8   # other DAC outputs sent to dummy adress to avoid sending to DAC
M_L	            MEMORY 1    # high freq part of the left channel
M_R	            MEMORY 1
M_C	            MEMORY 1
M_LS	        MEMORY 1
M_RS	        MEMORY 1
M_Ltm           MEMORY 1
M_Rtm           MEMORY 1
M_SUB	        MEMORY 1    # resulting sub channel including LFE
endif
#-
#-DAC outputs : L=[DAC_L], R=[DAC_R], C=[DAC_C], SUB=[DAC_SUB], LS=[DAC_LS], RS=[DAC_RS], Ltm=[DAC_Ltm], Rtm=[DAC_Rtm]

# intermediate memory location to hold part of signals (only declared if used)
if (MODE_SUB,sL)  M_L_SUB    MEMORY 1    # low freq part of the left channel
if (MODE_SUB,sR)  M_R_SUB    MEMORY 1
if (MODE_SUB,sC+sCENTER_TO_FRONT)  M_C_SUB	MEMORY 1
if (MODE_SUB,sC+sCENTER_TO_FRONT)  M_C_TEMP MEMORY 1
if (MODE_SUB,sLS) M_LS_SUB   MEMORY 1
if (MODE_SUB,sRS) M_RS_SUB   MEMORY 1
if (MODE_SUB,sLtm) M_Ltm_SUB MEMORY 1
if (MODE_SUB,sLtm) M_Rtm_SUB MEMORY 1

PureUSB		3	    # pattern to enable a core only when in PureUSB mode
USB_AES     4
PureAES		8	    # pattern to enable a core only when in PureAES mode
PureUSB_or_PureAES  = PureUSB+PureAES
not192k     x400
only192k    xB00
onlyAES1    b11100000


#################################################################
####           BASS MANAGEMENT PROGRAM                       ####
####                                                         ####
#### 4 cores in AES (5.1) + 2 cores for spdif decoding       ####
#### 6 cores in PureUSB (5.1.2)                              ####
####                                                         ####        
#################################################################

core PureUSB_or_PureAES
#-
#-#### CORE 1 : in charge of Left
if (TEST_REW,sALL,sL)   # if TEST_REW activated by Left speaker bit is 0
    clrxy               # then just clear the accumulator
else                    # in all other cases
	input 		 Lin    # load the value of the Left channel (from USB Host or PureAES)
endif                   # all done
if (MODE_SUB,sL)        # if the Left speaker is expected to use subwoofer for low freq
#-Left channel sub extraction
    copyxy
    biquad       F_FRONT_SUB
    memsave      M_L_SUB       # save low freq of the front left signal
    swapxy
    delayus      DEL_FRONT_BES
    subxy                      # compute front high pass (substractive filter)
else
    delayus      DEL_FRONT_BES
endif

if (MODE_SUB,sCENTER_TO_FRONT) addmem   M_C_TEMP      # eventually add the residual center low freq

if (TEST_REW,sL) memsave      M_L

if (WITH_EQ_F)	 biquad 	  F_FRONT_EQ	# eventually filtering Front Left (EQ)
if (WITH_DEL)	 delayus	  DEL_L			# adjusting delay for distance
if (1-VOL_SAT)   output 	  DAC_L
if (VOL_SAT)     outputvolsat DAC_L

#-== Left Surround : section PureAES,not192k
    section PureAES,not192k     # LS is managed here in PureAES only and only for 44..96k

if (TEST_REW,sALL,sLS)
    clrxy
else
    input 		 LSin
endif
if (MODE_SUB,sLS)
#-Surround left channel sub extraction
    delayus      DEL_FRONT_BES - DEL_SUR_BES
    copyxy
	biquad		 F_SUR_SUB
    memsave      M_LS_SUB        # save low freq
    swapxy
    delayus      DEL_SUR_BES
    subxy                       # compute 2nd order high pass
else
    delayus      DEL_FRONT_BES
endif

if (TEST_REW,sLS) memsave     M_LS

if (WITH_EQ_S)   biquad       F_SUR_EQ      # equalize eventually with some PEQs 
if (WITH_DEL)	 delayus	  DEL_LS        # distance allignement
if (1-VOL_SAT)   output 	  DAC_LS 
if (VOL_SAT)     outputvolsat DAC_LS

#-== Left Surround : sectionelse PureAES,only192k
    sectionelse PureAES,only192k    #special case if PureAES and 192k : simplified treatment, just delayed

if (TEST_REW,sALL,sLS)
    clrxy
else
    input        LSin
endif
    delayus      DEL_FRONT_BES       # alignement with Front crossover
if (WITH_DEL)    delayus      DEL_LS
if (1-VOL_SAT)   output       DAC_LS
if (VOL_SAT)     outputvolsat DAC_LS


core PureUSB_or_PureAES
#-
#-#### CORE 2 : in charge of Right

if (TEST_REW,sALL,sR) 
    clrxy
else
	input 		 Rin
endif
if (MODE_SUB,sR) 
#-Right channel sub extraction
    copyxy
    biquad       F_FRONT_SUB
    memsave      M_R_SUB
    swapxy
    delayus      DEL_FRONT_BES
    subxy
else
    delayus      DEL_FRONT_BES
endif

if (MODE_SUB,sCENTER_TO_FRONT) addmem   M_C_TEMP      # eventually add the residual center low freq

if (TEST_REW,sR) memsave      M_R

if (WITH_EQ_F)	 biquad 	  F_FRONT_EQ    # filtering Front Left (EQ)
if (WITH_DEL)	 delayus	  DEL_R			# adjusting delay for distance
if (1-VOL_SAT)   output 	  DAC_R
if (VOL_SAT)     outputvolsat DAC_R 		# alternative output when ready for "production"

DSPPRINTF 2
#-== Right Surround : section PureAES,not192k
section PureAES,not192k	        # RS is managed in this core when in Pure AES, to reduce total number of core to reduce impact on AES spdif decoding

if (TEST_REW,sALL,sRS) 
    clrxy
else
    input 		 RSin
endif
if (MODE_SUB,sRS)
#-Surround right channel sub extraction
    delayus      DEL_FRONT_BES - DEL_SUR_BES
    copyxy
	biquad		 F_SUR_SUB
    memsave      M_RS_SUB        # save low freq    
    swapxy
    delayus      DEL_SUR_BES
    subxy                     # compute high pass
else
    delayus      DEL_FRONT_BES
endif

if (TEST_REW,sRS) memsave     M_RS

if (WITH_EQ_S)   biquad       F_SUR_EQ      # equalize eventually with some PEQs 
if (WITH_DEL)	 delayus	  DEL_RS        # distance allignement
if (1-VOL_SAT)   output 	  DAC_RS
if (VOL_SAT)     outputvolsat DAC_RS

#-== Right Surround: sectionelse PureAES,only192k
    sectionelse PureAES,only192k
    # very basic treatment here, just delay
if (TEST_REW,sALL,sRS)
    clrxy
else
    input        RSin
endif
    delayus      DEL_FRONT_BES
if (WITH_DEL)    delayus      DEL_RS
if (1-VOL_SAT)   output       DAC_RS
if (VOL_SAT)     outputvolsat DAC_RS


core PureUSB_or_PureAES
#-
#-#### CORE 3 : in charge of Subwoofer only

if (TEST_REW)      
    loadmem      M_SUB   #-compute SUM with SUB
    if (TEST_REW,sL)   addmem 	    M_L     #-adding Left
    if (TEST_REW,sR)   addmem 	    M_R     #-adding Right
    if (TEST_REW,sLS)  addmem 	    M_LS    #-adding Surround Left
    if (TEST_REW,sRS)  addmem 	    M_RS    #-adding Surround Right
    if (TEST_REW,sC)   addmem 	    M_C     #-adding Centre
    if (TEST_REW,sLtm) addmem 	    M_Ltm   #-adding head Left
    if (TEST_REW,sRtm) addmem 	    M_Rtm   #-adding head Right
    output       REW_SUM
endif

	inputgain 	( LFEin, 10db )             # get LFE signal from Host and apply the usual 10 db gain
    delayus     DEL_FRONT_BES               # align with other channels
if (MODE_SUB,sL)   addmem 	    M_L_SUB
if (MODE_SUB,sR)   addmem 	    M_R_SUB
if (MODE_SUB,sC)   addmem 	    M_C_SUB
if (MODE_SUB,sLS)  addmem 	    M_LS_SUB
if (MODE_SUB,sRS)  addmem 	    M_RS_SUB
#-== LFE : section PureAES 
    section PureAES                         # pureAES in first to optimize TEST_SUMing time in PureAES mode
        gain       gain_SUB
        memsave    M_SUB                    # total of subwoofer for LCR+SUR LR
if (TEST_REW)      transfer   (8,24)        # just one feedback (also necessary to unmute dac)
if (1-TEST_REW)    transfer8  (8,24)	    # normal mode : feedback to xmos to enable loopback of AES inputs to 16..23
#-== LFE : sectionelse (PureUSB)
    sectionelse
if (MODE_SUB,sLtm)   addmem     M_Ltm_SUB
if (MODE_SUB,sRtm)   addmem     M_Rtm_SUB
        gain       gain_SUB
        memsave    M_SUB                    # total of subwoofer for LCR+SUR LR + SURtm LR
if (TEST_REW)    transfer ( 16, REW_LOOPBACK )      # always provide a basic loopback for REW reference
    section
if (WITH_EQ_SUB) biquad       F_SUB_EQ      # eventually apply specific biquad filtering for sub
if (WITH_DEL)	 delayus	  DEL_SUB
if (1-VOL_SAT)   output 	  DAC_SUB
if (VOL_SAT)     outputvolsat DAC_SUB


core PureUSB_or_PureAES
#-
#-#### CORE 4 : in charge of centre

if (MODE_SUB,sCENTER_TO_FRONT)            # compute ultra low frequency going to sub (same freq as Front) and complementary high pass
#-center channel sub extraction for front
    input 		Cin 			# get center channel 
    copyxy
    biquad      F_FRONT_SUB
    memsave     M_C_SUB         # save very low freq going to the sub in all cases
    swapxy
    delayus     DEL_FRONT_BES
    subxy                       # compute high pass at the same crossover point as front
    memsave     M_C_TEMP        # this signal will partly go to front speakers
endif

if (TEST_REW,sALL,sC) 
    clrxy
else
	input 		Cin 			# get center channel 
endif

if (MODE_SUB, sC + sCENTER_TO_FRONT )
#-Centre channel sub extraction
    delayus     DEL_FRONT_BES - DEL_CENTRE_BES
    copyxy
	biquad 		F_CENTRE_SUB    # extract low freq only.
    memsave     M_C_SUB         # save low freq

    if ( MODE_SUB, sCENTER_TO_FRONT ) 
        memsub  M_C_TEMP       # M_C_TEMP <= M_C_TEMP - lowfreq (possible because delays are alligned)
        memgain M_C_TEMP, 0.5  # divide by 2 as this will be added to both front speakers
    endif
    swapxy                   # retreive centre channel 
    delayus     DEL_CENTRE_BES  # after this delay, total delay = DEL_FRONT_BES
    subxy                      # compute high pass
else
    delayus     DEL_FRONT_BES
endif

if (TEST_REW,sC) memsave      M_C           # save high freq of centre channel for futur sumation

if (WITH_EQ_C)   biquad       F_CENTRE_EQ   # equalize eventually with some PEQs 
if (WITH_DEL)    delayus      DEL_C         # distance correction
if (1-VOL_SAT)   output       DAC_C
if (VOL_SAT)     outputvolsat DAC_C 	    # alternative output when ready for "production"


## management of the Surround speakers in Pure USB

core PureUSB		
#-
#-#### CORE 5 : in charge of LS and Ltm , this one ONLY activated in pureUSB

if (TEST_REW,sALL,sLS)
    clrxy
else
	input 		LSin
endif
if (MODE_SUB,sLS)
#-Surround left channel sub extraction
    delayus     DEL_FRONT_BES - DEL_SUR_BES
    copyxy
	biquad		F_SUR_SUB
    memsave     M_LS_SUB        # save low freq
    swapxy
    delayus     DEL_SUR_BES
    subxy                       # compute 2nd order high pass
else
    delayus     DEL_FRONT_BES
endif

if (TEST_REW,sLS) memsave    M_LS

if (WITH_EQ_S)                
    section PureUSB,not192k
    biquad      F_SUR_EQ        # equalize eventually with some PEQs 
    section
endif
if (WITH_DEL)	 delayus	  DEL_LS        # distance allignement
if (1-VOL_SAT)   output 	  DAC_LS 
if (VOL_SAT)     outputvolsat DAC_LS

if (TEST_REW,sALL,sLtm)
    clrxy
else
	input 		Ltmin
endif
if (MODE_SUB,sLtm)
#-Surround head left channel sub extraction
    delayus     DEL_FRONT_BES - DEL_SURtm_BES 
    copyxy
	biquad		F_SURtm_SUB
    memsave     M_Ltm_SUB     # save low freq
    swapxy
    delayus     DEL_SURtm_BES
    subxy                      # compute 2nd order high pass
else
    delayus     DEL_FRONT_BES
endif

if (TEST_REW,sLtm) memsave   M_Ltm
if (WITH_EQ_Stm)
    section PureUSB,not192k
    biquad      F_SURtm_EQ        # equalize eventually with some PEQs , only up to 96k
    section
endif
if (WITH_DEL)	 delayus	  DEL_Ltm       # distance allignement
if (1-VOL_SAT)   output 	  DAC_Ltm
if (VOL_SAT)     outputvolsat DAC_Ltm

core PureUSB
#-
#-#### CORE 6 : in charge of RS and Rtm , this one ONLY activated in pureUSB

if (TEST_REW,sALL,sRS)
    clrxy
else
	input 		RSin
endif
if (MODE_SUB,sRS)
#-Surround right channel sub extraction
    delayus     DEL_FRONT_BES - DEL_SUR_BES
    copyxy
	biquad		F_SUR_SUB
    memsave     M_RS_SUB        # save low freq    
    swapxy
    delayus     DEL_SUR_BES
    subxy                       # compute high pass
else
    delayus     DEL_FRONT_BES
endif

if (TEST_REW,sRS) memsave    M_RS

if (WITH_EQ_S)    
    section PureUSB,not192k
    biquad      F_SUR_EQ        # equalize eventually with some PEQs 
    section
endif
if (WITH_DEL)	 delayus	  DEL_RS        # distance allignement
if (1-VOL_SAT)   output 	  DAC_RS
if (VOL_SAT)     outputvolsat DAC_RS

if (TEST_REW,sALL,sRtm)
    clrxy
else
	input 		Rtmin
endif
if (MODE_SUB,sRtm)
#-Surround head right channel sub extraction
    delayus     DEL_FRONT_BES - DEL_SURtm_BES
    copyxy
	biquad		F_SURtm_SUB
    memsave     M_Rtm_SUB
    swapxy
    delayus     DEL_SURtm_BES
    subxy                           # compute high pass
else
    delayus     DEL_FRONT_BES
endif

if (TEST_REW,sRtm) memsave   M_Rtm
if (WITH_EQ_Stm)
    section PureUSB,not192k
    biquad      F_SURtm_EQ        # equalize eventually with some PEQs 
    section
endif
if (WITH_DEL)	 delayus	  DEL_Rtm       # distance allignement
if (1-VOL_SAT)   output 	  DAC_Rtm
if (VOL_SAT)     outputvolsat DAC_Rtm 

core USB_AES
    # all signals passthrough, no any treatment !!!
    transfer8   (8,24)
    transfer8   (16,0)

coreaes PureAES,onlyAES1      # this statement is used to launch the first spdif decoding core (on AES2)  
coreaes PureAES,onlyAES1      # this statement is used to launch the second spdif decoding core (on AES3) 
                              # AES4 can be used as a stereo channel, selecting PureAES4 on the display
end
